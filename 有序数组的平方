/*
给定一个按非递减顺序排序的整数数组 A，
返回每个数字的平方组成的新数组，要求也按非递减顺序排序。
*/

//排序法
lass Solution {
    public int[] sortedSquares(int[] A) {
        int[] res = new int[A.length];
        for (int i = 0; i < A.length; i++) {
            res[i] = A[i] * A[i];
        }
        Arrays.sort(res);
        return res;
    }
}


//双指针法
class Solution {
    public int[] sortedSquares(int[] A) {
        int[] res = new int[A.length];
        //两个指针分别指向A数组的开头和末尾
        //比较开头末尾元素绝对值的大小
        int left = 0, right = A.length - 1;
        int curr = A.length - 1;
        while (left <= right) {
            if (Math.abs(A[left]) >= Math.abs(A[right])) {
                //如果左边的绝对值大于等于右边
                //就把这个大的绝对值的平方放在数组末尾
                res[curr--] = A[left] * A[left];
                left++;
            } else {
                res[curr--] = A[right] * A[right];
                right--;
            }
        }
        return res;
    }
}

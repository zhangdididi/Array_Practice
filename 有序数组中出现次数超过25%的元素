/*
给你一个非递减的 有序 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。

请你找到并返回这个整数

示例：
输入：arr = [1,2,2,6,6,6,6,7,10]
输出：6

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/element-appearing-more-than-25-in-sorted-array
*/

//指针遍历
class Solution {
    public int findSpecialInteger(int[] arr) {
        if (arr.length == 1) {
            return arr[0];
        }
        int index = arr.length / 4;
        int sum = 1;
        int curr = 0;
        while (curr < arr.length - 1) {
            while (curr < arr.length - 1 && arr[curr] == arr[curr + 1]) {
                sum++;
                curr++;
            }
            if (sum > index) {
                return arr[curr];
            } else {
                sum = 1;
                curr++;
            }
        }
        return -1;
    }
}

//哈希表
class Solution {
    public int findSpecialInteger(int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : arr) {
            int count = map.getOrDefault(num, 0);
            map.put(num, count + 1);
        }
        //map中存储数组的元素以及个数
        for (int i = 0; i < arr.length; i++) {
            if (map.get(arr[i]) > arr.length / 4) {
                return arr[i];
            }
        }
        return -1;
    }
}

/*
 在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。

返回重复了 N 次的那个元素。

示例 1：
输入：[1,2,3,3]
输出：3

示例 2：
输入：[2,1,2,5,3,2]
输出：2

示例 3：
输入：[5,1,5,2,5,3,5,4]
输出：5

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array
*/
//哈希表,效率低
class Solution {
    public int repeatedNTimes(int[] A) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : A) {
            int count = map.getOrDefault(num, 0);
            map.put(num, count + 1);
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == A.length / 2) {
                return entry.getKey();
            }
        }
        return 0;
    }
}

//三指针最快
class Solution {
    public int repeatedNTimes(int[] A) {
        int slow = 0;
        int mid = slow + 1;
        int fast = slow + 2;   
        while (fast < A.length) {
            if (A[slow] == A[mid] || A[slow] == A[fast]) {
                return A[slow];
            } else if (A[mid] == A[fast]) {
                return A[mid];
            } else if (A[0] == A[A.length - 1]){
                //用来判断数组长度为4时,三个指针指不到的情况
                return A[0];
            }
            slow++;
            mid++;
            fast++;
        }
        return -1;
    }
}

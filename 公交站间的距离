/*
环形公交路线上有 n 个站，按次序从 0 到 n - 1 进行编号。
我们已知每一对相邻公交站之间的距离，distance[i] 表示编号为 i 的车站和编号为 (i + 1) % n 的车站之间的距离。
环线上的公交车都可以按顺时针和逆时针的方向行驶。
返回乘客从出发点 start 到目的地 destination 之间的最短距离。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/distance-between-bus-stops
*/


class Solution {
    public int distanceBetweenBusStops(int[] distance, int start, int destination) {
        if (start < 0 || destination < 0) return -1;
        int left = Math.min(start, destination);
        int right = Math.max(start, destination);
        int count1 = 0;
        int count2 = 0;
        for (int i = 0; i < distance.length; i++) {
            if (i >= left && i < right) {
                count1 += distance[i];
            } else {
                count2 += distance[i];
            }
        }
        return count1 <= count2 ? count1 : count2;
    }
}
